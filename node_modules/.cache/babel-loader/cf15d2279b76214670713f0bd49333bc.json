{"ast":null,"code":"var _jsxFileName = \"/home/trainee/Documents/react-demo/src/components/NoteApp.js\",\n    _s = $RefreshSig$();\n\nimport notesReducer from './reducers/notesReducer';\nimport IterateNote from './Note';\nimport React, { useState, useEffect, useReducer } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AddNotes = () => {\n  _s();\n\n  //const notesData=localStorage.getItem('notes')\n  //const notesData=JSON.parse(localStorage.getItem('mynotes'))\n  const [title, setTitle] = useState(''); //const [notes, setNotes] = useState([]);\n\n  const [notes, notedispatch] = useReducer(notesReducer, []);\n  const [noteBody, setNoteBody] = useState('');\n  useEffect(() => {\n    const notesData = JSON.parse(localStorage.getItem('mynotes'));\n\n    if (notesData) {\n      notedispatch({\n        type: 'POPULATE_NOTES',\n        notes: notesData\n      });\n    }\n  }, []);\n  useEffect(() => {\n    localStorage.setItem('mynotes', JSON.stringify(notes));\n  }, [notes]);\n\n  const addnote = e => {\n    e.preventDefault();\n    notedispatch({\n      type: 'ADD_NOTES',\n      title,\n      noteBody\n    }); //console.log(e.target.value)\n    //console.log(title)\n    // setNotes([\n    //   ...notes,\n    //   {title,noteBody}\n    // ])\n\n    setTitle('');\n    setNoteBody('');\n  };\n\n  const removeNote = title => {\n    //setNotes(notes.filter((note)=>note.title!==title))\n    notedispatch({\n      type: 'REMOVE_NOTES',\n      title\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: notes.map(note => /*#__PURE__*/_jsxDEV(IterateNote, {\n        note: note,\n        removeNote: removeNote\n      }, note.title, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addnote,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: title,\n        onChange: e => setTitle(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        type: \"text\",\n        value: noteBody,\n        onChange: e => setNoteBody(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Add Note\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 7\n  }, this);\n};\n\n_s(AddNotes, \"KZNWWNwnbnFqKGBEpy5e7k+YqXY=\");\n\n_c = AddNotes;\nexport default AddNotes;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddNotes\");","map":{"version":3,"sources":["/home/trainee/Documents/react-demo/src/components/NoteApp.js"],"names":["notesReducer","IterateNote","React","useState","useEffect","useReducer","AddNotes","title","setTitle","notes","notedispatch","noteBody","setNoteBody","notesData","JSON","parse","localStorage","getItem","type","setItem","stringify","addnote","e","preventDefault","removeNote","map","note","target","value"],"mappings":";;;AAAA,OAAOA,YAAP,MAAyB,yBAAzB;AACA,OAAOC,WAAP,MAAwB,QAAxB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAAyBC,SAAzB,EAAmCC,UAAnC,QAAoD,OAApD;;;AACA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACnB;AACA;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,EAAD,CAAlC,CAHmB,CAInB;;AACA,QAAM,CAACM,KAAD,EAAQC,YAAR,IAAwBL,UAAU,CAACL,YAAD,EAAe,EAAf,CAAxC;AACA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,EAAD,CAAxC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMS,SAAS,GAACC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAX,CAAhB;;AACA,QAAIJ,SAAJ,EAAe;AACbH,MAAAA,YAAY,CAAC;AAACQ,QAAAA,IAAI,EAAC,gBAAN;AAAuBT,QAAAA,KAAK,EAACI;AAA7B,OAAD,CAAZ;AACD;AAEF,GANQ,EAMP,EANO,CAAT;AAOAT,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,YAAY,CAACG,OAAb,CAAqB,SAArB,EAA+BL,IAAI,CAACM,SAAL,CAAeX,KAAf,CAA/B;AACD,GAFQ,EAEP,CAACA,KAAD,CAFO,CAAT;;AAKA,QAAMY,OAAO,GAAIC,CAAD,IAAO;AACrBA,IAAAA,CAAC,CAACC,cAAF;AAEAb,IAAAA,YAAY,CAAC;AAAEQ,MAAAA,IAAI,EAAE,WAAR;AAAqBX,MAAAA,KAArB;AAA4BI,MAAAA;AAA5B,KAAD,CAAZ,CAHqB,CAIrB;AACA;AACA;AACA;AACA;AACA;;AACAH,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACAI,IAAAA,WAAW,CAAC,EAAD,CAAX;AACD,GAZD;;AAaA,QAAMY,UAAU,GAAIjB,KAAD,IAAW;AAC5B;AACAG,IAAAA,YAAY,CAAC;AAACQ,MAAAA,IAAI,EAAC,cAAN;AAAqBX,MAAAA;AAArB,KAAD,CAAZ;AACD,GAHD;;AAIA,sBACE;AAAA,4BACE;AAAA,gBAAKE,KAAK,CAACgB,GAAN,CAAWC,IAAD,iBAEb,QAAC,WAAD;AAAa,QAAA,IAAI,EAAEA,IAAnB;AAA0C,QAAA,UAAU,EAAEF;AAAtD,SAA8BE,IAAI,CAACnB,KAAnC;AAAA;AAAA;AAAA;AAAA,cAFG;AAAL;AAAA;AAAA;AAAA;AAAA,YADF,eAKA;AAAM,MAAA,QAAQ,EAAEc,OAAhB;AAAA,8BACI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,KAAK,EAAEd,KAA1B;AAAiC,QAAA,QAAQ,EAAGe,CAAD,IAAOd,QAAQ,CAACc,CAAC,CAACK,MAAF,CAASC,KAAV;AAA1D;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAU,QAAA,IAAI,EAAC,MAAf;AAAsB,QAAA,KAAK,EAAEjB,QAA7B;AAAuC,QAAA,QAAQ,EAAGW,CAAD,IAAKV,WAAW,CAACU,CAAC,CAACK,MAAF,CAASC,KAAV;AAAjE;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YALA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,CAnDH;;GAAMtB,Q;;KAAAA,Q;AAoDN,eAAeA,QAAf","sourcesContent":["import notesReducer from './reducers/notesReducer'\nimport IterateNote from './Note'\nimport React, { useState,useEffect,useReducer} from 'react';\nconst AddNotes = () => {\n    //const notesData=localStorage.getItem('notes')\n    //const notesData=JSON.parse(localStorage.getItem('mynotes'))\n    const [title, setTitle] = useState('');\n    //const [notes, setNotes] = useState([]);\n    const [notes, notedispatch] = useReducer(notesReducer, []);\n    const [noteBody, setNoteBody] = useState('');\n    useEffect(() => {\n      const notesData=JSON.parse(localStorage.getItem('mynotes'))\n      if (notesData) {\n        notedispatch({type:'POPULATE_NOTES',notes:notesData})\n      }\n      \n    },[])\n    useEffect(() => {\n      localStorage.setItem('mynotes',JSON.stringify(notes))\n    },[notes])\n  \n    \n    const addnote = (e) => {\n      e.preventDefault()\n  \n      notedispatch({ type: 'ADD_NOTES', title, noteBody })\n      //console.log(e.target.value)\n      //console.log(title)\n      // setNotes([\n      //   ...notes,\n      //   {title,noteBody}\n      // ])\n      setTitle('')\n      setNoteBody('');\n    }\n    const removeNote = (title) => {\n      //setNotes(notes.filter((note)=>note.title!==title))\n      notedispatch({type:'REMOVE_NOTES',title})\n    }\n    return (\n      <div>\n        <h1>{notes.map((note) => (\n  \n          <IterateNote note={note} key={note.title} removeNote={removeNote}/>\n        )) }</h1>\n      <form onSubmit={addnote}>\n          <input type='text' value={title} onChange={(e) => setTitle(e.target.value)} />\n          <textarea type='text' value={noteBody} onChange={(e)=>setNoteBody(e.target.value)}/>\n        <button>Add Note</button>\n        </form>\n  \n  \n        </div>\n    )\n  }\nexport default AddNotes;"]},"metadata":{},"sourceType":"module"}