{"ast":null,"code":"var _jsxFileName = \"/home/trainee/Documents/react-demo/src/index.js\",\n    _s = $RefreshSig$();\n\n// import React, { useState,useEffect,useReducer} from 'react';\n// import ReactDOM from 'react-dom';\n// import reportWebVitals from './reportWebVitals';\n// // const App = (props) => {\n// //   const [count, setCount] = useState(0)\n// //   const [word, setWord] = useState(props.word);\n// //   useEffect(() => {\n// //     document.title= count + word\n// //   })\n// //   const increment = () => {\n// //       setCount(count+1)\n// //   }\n// //   const decrement = () => {\n// //     setCount(count-1)\n// //   }\n// //   const reset = () => {\n// //     setCount(props.count)\n// //   }\n// //   return (\n// //     <div>\n// //       <h1>This is {word} {count}</h1>\n// //       <button onClick={increment}>+1</button>\n// //       <button onClick={reset}>Reset</button>\n// //       <button onClick={decrement}>-1</button>\n// //       <input type='text' value={word} onChange={(e) => setWord(e.target.value)}></input>\n// //     </div>\n// //   )\n// // }\n// // App.defaultProps = {\n// //   count: 0,\n// //   word:'count'\n// // }\n// const AddNotes = () => {\n//   //const notesData=localStorage.getItem('notes')\n//   //const notesData=JSON.parse(localStorage.getItem('mynotes'))\n//   const notesReducer = (state, action) => {\n//     switch (action.type) {\n//       case 'POPULATE_NOTES':\n//         return action.notes\n//       case 'ADD_NOTES':\n//         return [\n//           ...state,\n//           {\n//             title: action.title,\n//             noteBody:action.noteBody\n//           }\n//         ]\n//       case 'REMOVE_NOTES':\n//         return state.filter((note)=>note.title!==action.title)\n//       default:\n//         return state\n//     }\n// }\n//   const [title, setTitle] = useState('');\n//   //const [notes, setNotes] = useState([]);\n//   const [notes, notedispatch] = useReducer(notesReducer, []);\n//   const [noteBody, setNoteBody] = useState('');\n//   useEffect(() => {\n//     const notesData=JSON.parse(localStorage.getItem('mynotes'))\n//     if (notesData) {\n//       notedispatch({type:'POPULATE_NOTES',notes:notesData})\n//     }\n//   },[])\n//   useEffect(() => {\n//     localStorage.setItem('mynotes',JSON.stringify(notes))\n//   },[notes])\n//   const addnote = (e) => {\n//     e.preventDefault()\n//     notedispatch({ type: 'ADD_NOTES', title, noteBody })\n//     //console.log(e.target.value)\n//     //console.log(title)\n//     // setNotes([\n//     //   ...notes,\n//     //   {title,noteBody}\n//     // ])\n//     setTitle('')\n//     setNoteBody('');\n//   }\n//   const removeNote = (title) => {\n//     //setNotes(notes.filter((note)=>note.title!==title))\n//     notedispatch({type:'REMOVE_NOTES',title})\n//   }\n//   return (\n//     <div>\n//       <h1>{notes.map((note) => (\n//         <IterateNote note={note} key={note.title} removeNote={removeNote}/>\n//       )) }</h1>\n//     <form onSubmit={addnote}>\n//         <input type='text' value={title} onChange={(e) => setTitle(e.target.value)} />\n//         <textarea type='text' value={noteBody} onChange={(e)=>setNoteBody(e.target.value)}/>\n//       <button>Add Note</button>\n//       </form>\n//       </div>\n//   )\n// }\n// const IterateNote = ({ note, removeNote }) => {\n//   useEffect(() => {\n//     console.log(\"setting up\")\n//     return () => {\n//       console.log(\"cleaning\")\n//     }\n//   },[])\n//   return (\n//     <div>\n//           {<div><h1>{note.title}  </h1><p>{ note.noteBody}</p></div>}\n//           <button onClick={()=>removeNote(note.title)}>Remove</button>\n//         </div>\n//   )\n// }\n// ReactDOM.render(\n//   <div><AddNotes /></div>,\n//   document.getElementById('root')\n// );\n// // If you want to start measuring performance in your app, pass a function\n// // to log results (for example: reportWebVitals(console.log))\n// // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\nimport React, { useState, useEffect, useReducer } from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AddNotes = () => {\n  _s();\n\n  // const [notes,dipatch]=useReducer()\n  const notesReducer = (state, action) => {\n    switch (action.type) {\n      case 'POPULATE':\n        return action.notes;\n\n      case 'ADD_NOTE':\n        return [...state, {\n          title: action.title,\n          body: action.body\n        }];\n\n      default:\n        return state;\n    }\n  };\n\n  const [title, setTitle] = useState('hello');\n  const [body, setBody] = useState('world');\n  const [notes, dispatch] = useReducer(notesReducer, []);\n  useEffect(() => {\n    localStorage.setItem('mynotes', JSON.stringify(notes));\n  }, [notes]);\n\n  const addNote = e => {\n    e.preventDefault();\n    dispatch({\n      type: 'POPULATE',\n      title,\n      body\n    });\n    setTitle('');\n    setBody('');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addNote,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: title,\n        onChange: e => {\n          setTitle(e.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        type: \"text\",\n        value: body,\n        onChange: e => {\n          setBody(e.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 180,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AddNotes, \"AdGqzAPulrRh/oAwuBkSlfZCFNQ=\");\n\n_c = AddNotes;\nReactDOM.render( /*#__PURE__*/_jsxDEV(\"div\", {\n  children: /*#__PURE__*/_jsxDEV(AddNotes, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 10\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 192,\n  columnNumber: 5\n}, this), document.getElementById('root'));\nreportWebVitals();\n\nvar _c;\n\n$RefreshReg$(_c, \"AddNotes\");","map":{"version":3,"sources":["/home/trainee/Documents/react-demo/src/index.js"],"names":["React","useState","useEffect","useReducer","ReactDOM","reportWebVitals","AddNotes","notesReducer","state","action","type","notes","title","body","setTitle","setBody","dispatch","localStorage","setItem","JSON","stringify","addNote","e","preventDefault","target","value","render","document","getElementById"],"mappings":";;;AAAA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,IAAgBC,QAAhB,EAAyBC,SAAzB,EAAmCC,UAAnC,QAAoD,OAApD;AACA,OAAOC,QAAP,MAAqB,WAArB;AAGA,OAAOC,eAAP,MAA4B,mBAA5B;;;AAGA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AAEpB;AACD,QAAMC,YAAY,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACtC,YAAQA,MAAM,CAACC,IAAf;AACE,WAAK,UAAL;AACE,eAAOD,MAAM,CAACE,KAAd;;AACF,WAAK,UAAL;AACE,eAAO,CACL,GAAGH,KADE,EAEL;AAACI,UAAAA,KAAK,EAACH,MAAM,CAACG,KAAd;AAAoBC,UAAAA,IAAI,EAACJ,MAAM,CAACI;AAAhC,SAFK,CAAP;;AAIF;AACE,eAAOL,KAAP;AATJ;AAWC,GAZH;;AAaE,QAAM,CAACI,KAAD,EAAQE,QAAR,IAAoBb,QAAQ,CAAC,OAAD,CAAlC;AACF,QAAM,CAACY,IAAD,EAAOE,OAAP,IAAkBd,QAAQ,CAAC,OAAD,CAAhC;AACA,QAAM,CAACU,KAAD,EAAQK,QAAR,IAAoBb,UAAU,CAACI,YAAD,EAAe,EAAf,CAApC;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,YAAY,CAACC,OAAb,CAAqB,SAArB,EAA+BC,IAAI,CAACC,SAAL,CAAeT,KAAf,CAA/B;AACD,GAFQ,EAEP,CAACA,KAAD,CAFO,CAAT;;AAGE,QAAMU,OAAO,GAAIC,CAAD,IAAO;AACrBA,IAAAA,CAAC,CAACC,cAAF;AACAP,IAAAA,QAAQ,CAAC;AAAEN,MAAAA,IAAI,EAAE,UAAR;AAAoBE,MAAAA,KAApB;AAA2BC,MAAAA;AAA3B,KAAD,CAAR;AACAC,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACAC,IAAAA,OAAO,CAAC,EAAD,CAAP;AAED,GAND;;AAOA,sBACI;AAAA,2BACI;AAAM,MAAA,QAAQ,EAAEM,OAAhB;AAAA,8BACI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,KAAK,EAAET,KAA1B;AAAiC,QAAA,QAAQ,EAAGU,CAAD,IAAO;AAAER,UAAAA,QAAQ,CAACQ,CAAC,CAACE,MAAF,CAASC,KAAV,CAAR;AAA0B;AAA9E;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAU,QAAA,IAAI,EAAC,MAAf;AAAsB,QAAA,KAAK,EAAEZ,IAA7B;AAAmC,QAAA,QAAQ,EAAGS,CAAD,IAAO;AAAEP,UAAAA,OAAO,CAACO,CAAC,CAACE,MAAF,CAASC,KAAV,CAAP;AAAyB;AAA/E;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH,CAxCD;;GAAMnB,Q;;KAAAA,Q;AA0CNF,QAAQ,CAACsB,MAAT,eACI;AAAA,yBAAK,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,QADJ,EAEIC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAFJ;AAIAvB,eAAe","sourcesContent":["// import React, { useState,useEffect,useReducer} from 'react';\n// import ReactDOM from 'react-dom';\n\n\n// import reportWebVitals from './reportWebVitals';\n\n// // const App = (props) => {\n// //   const [count, setCount] = useState(0)\n  \n// //   const [word, setWord] = useState(props.word);\n// //   useEffect(() => {\n// //     document.title= count + word\n// //   })\n// //   const increment = () => {\n    \n// //       setCount(count+1)\n    \n// //   }\n// //   const decrement = () => {\n// //     setCount(count-1)\n// //   }\n// //   const reset = () => {\n// //     setCount(props.count)\n// //   }\n// //   return (\n// //     <div>\n// //       <h1>This is {word} {count}</h1>\n// //       <button onClick={increment}>+1</button>\n// //       <button onClick={reset}>Reset</button>\n// //       <button onClick={decrement}>-1</button>\n// //       <input type='text' value={word} onChange={(e) => setWord(e.target.value)}></input>\n// //     </div>\n// //   )\n// // }\n// // App.defaultProps = {\n// //   count: 0,\n// //   word:'count'\n// // }\n\n\n// const AddNotes = () => {\n//   //const notesData=localStorage.getItem('notes')\n//   //const notesData=JSON.parse(localStorage.getItem('mynotes'))\n\n//   const notesReducer = (state, action) => {\n//     switch (action.type) {\n//       case 'POPULATE_NOTES':\n//         return action.notes\n//       case 'ADD_NOTES':\n//         return [\n//           ...state,\n//           {\n//             title: action.title,\n//             noteBody:action.noteBody\n//           }\n//         ]\n//       case 'REMOVE_NOTES':\n//         return state.filter((note)=>note.title!==action.title)\n//       default:\n//         return state\n//     }\n// }\n\n//   const [title, setTitle] = useState('');\n//   //const [notes, setNotes] = useState([]);\n\n//   const [notes, notedispatch] = useReducer(notesReducer, []);\n\n//   const [noteBody, setNoteBody] = useState('');\n//   useEffect(() => {\n//     const notesData=JSON.parse(localStorage.getItem('mynotes'))\n//     if (notesData) {\n//       notedispatch({type:'POPULATE_NOTES',notes:notesData})\n//     }\n    \n//   },[])\n//   useEffect(() => {\n//     localStorage.setItem('mynotes',JSON.stringify(notes))\n//   },[notes])\n\n  \n//   const addnote = (e) => {\n//     e.preventDefault()\n\n//     notedispatch({ type: 'ADD_NOTES', title, noteBody })\n//     //console.log(e.target.value)\n//     //console.log(title)\n//     // setNotes([\n//     //   ...notes,\n//     //   {title,noteBody}\n//     // ])\n//     setTitle('')\n//     setNoteBody('');\n//   }\n//   const removeNote = (title) => {\n//     //setNotes(notes.filter((note)=>note.title!==title))\n//     notedispatch({type:'REMOVE_NOTES',title})\n//   }\n//   return (\n//     <div>\n//       <h1>{notes.map((note) => (\n//         <IterateNote note={note} key={note.title} removeNote={removeNote}/>\n//       )) }</h1>\n//     <form onSubmit={addnote}>\n//         <input type='text' value={title} onChange={(e) => setTitle(e.target.value)} />\n//         <textarea type='text' value={noteBody} onChange={(e)=>setNoteBody(e.target.value)}/>\n//       <button>Add Note</button>\n//       </form>\n\n\n//       </div>\n//   )\n// }\n// const IterateNote = ({ note, removeNote }) => {\n  \n//   useEffect(() => {\n//     console.log(\"setting up\")\n//     return () => {\n//       console.log(\"cleaning\")\n//     }\n//   },[])\n\n//   return (\n//     <div>\n//           {<div><h1>{note.title}  </h1><p>{ note.noteBody}</p></div>}\n          \n//           <button onClick={()=>removeNote(note.title)}>Remove</button>\n//         </div>\n//   )\n// }\n\n// ReactDOM.render(\n//   <div><AddNotes /></div>,\n//   document.getElementById('root')\n// );\n\n// // If you want to start measuring performance in your app, pass a function\n// // to log results (for example: reportWebVitals(console.log))\n// // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n\nimport React, { useState,useEffect,useReducer} from 'react';\nimport ReactDOM from 'react-dom';\n\n\nimport reportWebVitals from './reportWebVitals';\n\n\nconst AddNotes = () => {\n\n   // const [notes,dipatch]=useReducer()\n  const notesReducer = (state, action) => {\n    switch (action.type) {\n      case 'POPULATE':\n        return action.notes\n      case 'ADD_NOTE':\n        return [\n          ...state,\n          {title:action.title,body:action.body}\n        ]\n      default:\n        return state\n      }\n    }\n    const [title, setTitle] = useState('hello')\n  const [body, setBody] = useState('world')\n  const [notes, dispatch] = useReducer(notesReducer, [])\n  \n  useEffect(() => {\n    localStorage.setItem('mynotes',JSON.stringify(notes))\n  },[notes])\n    const addNote = (e) => {\n      e.preventDefault()\n      dispatch({ type: 'POPULATE', title, body })\n      setTitle('')\n      setBody('')\n      \n    }\n    return (\n        <div>\n            <form onSubmit={addNote}>\n                <input type='text' value={title} onChange={(e) => { setTitle(e.target.value) }} />\n                <textarea type='text' value={body} onChange={(e) => { setBody(e.target.value) }} />\n                <button >Add</button>\n            </form>\n        </div>\n    )\n    \n}\n\nReactDOM.render(\n    <div><AddNotes /></div>,\n    document.getElementById('root')\n);\nreportWebVitals();"]},"metadata":{},"sourceType":"module"}