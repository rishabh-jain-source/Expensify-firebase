{"ast":null,"code":"var _jsxFileName = \"/home/trainee/Documents/react-demo/src/index.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect, useReducer } from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals'; // const App = (props) => {\n//   const [count, setCount] = useState(0)\n//   const [word, setWord] = useState(props.word);\n//   useEffect(() => {\n//     document.title= count + word\n//   })\n//   const increment = () => {\n//       setCount(count+1)\n//   }\n//   const decrement = () => {\n//     setCount(count-1)\n//   }\n//   const reset = () => {\n//     setCount(props.count)\n//   }\n//   return (\n//     <div>\n//       <h1>This is {word} {count}</h1>\n//       <button onClick={increment}>+1</button>\n//       <button onClick={reset}>Reset</button>\n//       <button onClick={decrement}>-1</button>\n//       <input type='text' value={word} onChange={(e) => setWord(e.target.value)}></input>\n//     </div>\n//   )\n// }\n// App.defaultProps = {\n//   count: 0,\n//   word:'count'\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AddNotes = () => {\n  _s();\n\n  //const notesData=localStorage.getItem('notes')\n  //const notesData=JSON.parse(localStorage.getItem('mynotes'))\n  const notesReducer = (state, action) => {\n    switch (action.type) {\n      case 'POPULATE_NOTES':\n        return action.notes;\n\n      case 'ADD_NOTES':\n        return [...state, {\n          title: action.title,\n          notebody: action.notebody\n        }];\n\n      default:\n        return state;\n    }\n  };\n\n  const [title, setTitle] = useState(''); //const [notes, setNotes] = useState([]);\n\n  const [notes, notedispatch] = useReducer(notesReducer, []);\n  const [noteBody, setNoteBody] = useState('');\n  useEffect(() => {\n    const notesData = JSON.parse(localStorage.getItem('mynotes'));\n\n    if (notesData) {\n      notedispatch({\n        type: 'POPULATE_NOTES',\n        notes: notesData\n      });\n    }\n  }, []);\n  useEffect(() => {\n    localStorage.setItem('mynotes', JSON.stringify(notes));\n  }, [notes]);\n\n  const addnote = e => {\n    e.preventDefault();\n    notedispatch({\n      type: 'ADD_NOTES',\n      title,\n      notebody\n    }); //console.log(e.target.value)\n    //console.log(title)\n    // setNotes([\n    //   ...notes,\n    //   {title,noteBody}\n    // ])\n\n    setTitle('');\n    setNoteBody('');\n  };\n\n  const removeNote = title => {//setNotes(notes.filter((note)=>note.title!==title))\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: notes.map(note => /*#__PURE__*/_jsxDEV(IterateNote, {\n        note: note,\n        removeNote: removeNote\n      }, note.title, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addnote,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: title,\n        onChange: e => setTitle(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        type: \"text\",\n        value: noteBody,\n        onChange: e => setNoteBody(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Add Note\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AddNotes, \"KZNWWNwnbnFqKGBEpy5e7k+YqXY=\");\n\n_c = AddNotes;\n\nconst IterateNote = ({\n  note,\n  removeNote\n}) => {\n  _s2();\n\n  useEffect(() => {\n    console.log(\"setting up\");\n    return () => {\n      console.log(\"cleaning\");\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [note.title, \"  \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: note.noteBody\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 40\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => removeNote(note.title),\n      children: \"Remove\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(IterateNote, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c2 = IterateNote;\nReactDOM.render( /*#__PURE__*/_jsxDEV(\"div\", {\n  children: /*#__PURE__*/_jsxDEV(AddNotes, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 8\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 128,\n  columnNumber: 3\n}, this), document.getElementById('root')); // If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals();\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AddNotes\");\n$RefreshReg$(_c2, \"IterateNote\");","map":{"version":3,"sources":["/home/trainee/Documents/react-demo/src/index.js"],"names":["React","useState","useEffect","useReducer","ReactDOM","reportWebVitals","AddNotes","notesReducer","state","action","type","notes","title","notebody","setTitle","notedispatch","noteBody","setNoteBody","notesData","JSON","parse","localStorage","getItem","setItem","stringify","addnote","e","preventDefault","removeNote","map","note","target","value","IterateNote","console","log","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useState,useEffect,useReducer} from 'react';\nimport ReactDOM from 'react-dom';\n\n\nimport reportWebVitals from './reportWebVitals';\n\n// const App = (props) => {\n//   const [count, setCount] = useState(0)\n  \n//   const [word, setWord] = useState(props.word);\n//   useEffect(() => {\n//     document.title= count + word\n//   })\n//   const increment = () => {\n    \n//       setCount(count+1)\n    \n//   }\n//   const decrement = () => {\n//     setCount(count-1)\n//   }\n//   const reset = () => {\n//     setCount(props.count)\n//   }\n//   return (\n//     <div>\n//       <h1>This is {word} {count}</h1>\n//       <button onClick={increment}>+1</button>\n//       <button onClick={reset}>Reset</button>\n//       <button onClick={decrement}>-1</button>\n//       <input type='text' value={word} onChange={(e) => setWord(e.target.value)}></input>\n//     </div>\n//   )\n// }\n// App.defaultProps = {\n//   count: 0,\n//   word:'count'\n// }\n\n\nconst AddNotes = () => {\n  //const notesData=localStorage.getItem('notes')\n  //const notesData=JSON.parse(localStorage.getItem('mynotes'))\n\n  const notesReducer = (state, action) => {\n    switch (action.type) {\n      case 'POPULATE_NOTES':\n        return action.notes\n      case 'ADD_NOTES':\n        return [\n          ...state,\n          {\n            title: action.title,\n            notebody:action.notebody\n          }\n        ]\n      default:\n        return state\n    }\n}\n\n  const [title, setTitle] = useState('');\n  //const [notes, setNotes] = useState([]);\n\n  const [notes, notedispatch] = useReducer(notesReducer, []);\n\n  const [noteBody, setNoteBody] = useState('');\n  useEffect(() => {\n    const notesData=JSON.parse(localStorage.getItem('mynotes'))\n    if (notesData) {\n      notedispatch({type:'POPULATE_NOTES',notes:notesData})\n    }\n    \n  },[])\n  useEffect(() => {\n    localStorage.setItem('mynotes',JSON.stringify(notes))\n  },[notes])\n\n  \n  const addnote = (e) => {\n    e.preventDefault()\n\n    notedispatch({ type: 'ADD_NOTES', title, notebody })\n    //console.log(e.target.value)\n    //console.log(title)\n    // setNotes([\n    //   ...notes,\n    //   {title,noteBody}\n    // ])\n    setTitle('')\n    setNoteBody('');\n  }\n  const removeNote = (title) => {\n    //setNotes(notes.filter((note)=>note.title!==title))\n  }\n  return (\n    <div>\n      <h1>{notes.map((note) => (\n        <IterateNote note={note} key={note.title} removeNote={removeNote}/>\n      )) }</h1>\n    <form onSubmit={addnote}>\n        <input type='text' value={title} onChange={(e) => setTitle(e.target.value)} />\n        <textarea type='text' value={noteBody} onChange={(e)=>setNoteBody(e.target.value)}/>\n      <button>Add Note</button>\n      </form>\n      </div>\n  )\n}\nconst IterateNote = ({ note, removeNote }) => {\n  \n  useEffect(() => {\n    console.log(\"setting up\")\n    return () => {\n      console.log(\"cleaning\")\n    }\n  },[])\n\n  return (\n    <div>\n          {<div><h1>{note.title}  </h1><p>{ note.noteBody}</p></div>}\n          \n          <button onClick={()=>removeNote(note.title)}>Remove</button>\n        </div>\n  )\n}\n\nReactDOM.render(\n  <div><AddNotes /></div>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"]},"metadata":{},"sourceType":"module"}